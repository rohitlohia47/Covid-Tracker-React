{"version":3,"sources":["Logo/logo.png","Components/Card/Cards.js","Api.js","Components/CountryPicker/CountryPicker.js","Components/Chart/Chart.js","App.js","index.js"],"names":["module","exports","Cards","props","fetchedData","confirmed","recovered","deaths","lastUpdate","Grid","container","item","lg","md","sm","xs","spacing","className","CardContent","Typography","color","gutterBottom","variant","component","start","end","value","duration","separator","Date","toDateString","fetchData","a","fetch","data","json","newData","fetchCountries","countries","countriesJSON","fetchByCountry","countryName","modifiedData","fetchDailyData","CountryPicker","useState","changeCountryName","useEffect","countriesobj","fetchAPI","onChange","e","setcountry","target","map","elem","name","Chart","dailyData","setDailyData","fetchChartData","lineChart","length","labels","reportDate","datasets","label","total","borderColor","backgroundColor","barChart","options","legend","display","App","cardData","changeCardData","selectedCountry","chnageSelectedCountry","country","loadCountryData","src","logo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.927b0059.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6fafc4f.png\";","import React from 'react'\r\nimport \"./Card.css\"\r\nimport CountUp from 'react-countup';\r\n\r\nimport { Card, Grid, CardContent, Typography } from '@material-ui/core';\r\n\r\nconst Cards = (props) =>{\r\n   const {confirmed, recovered, deaths, lastUpdate} = props.fetchedData\r\n\r\n   if(!confirmed){\r\n        return 'Loading.....'\r\n   }\r\n    \r\n    return(\r\n        <>\r\n        <Grid container>\r\n            <Grid item lg={2} md={1} sm={1} xs={1}>\r\n            \r\n            </Grid>\r\n            <Grid container lg={8} md={10} xs={10} spacing={2}>\r\n                <Grid item lg={4} md={4} xs={12}>\r\n                <Card className=\"confirmedCard\">\r\n                    <CardContent>\r\n                        <Typography  color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\"><CountUp start={0} end={confirmed.value} duration={2} separator=',' /></Typography>\r\n                        <Typography  color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">Number Active Cases</Typography>\r\n                    </CardContent>\r\n      \r\n                 </Card>\r\n               \r\n            </Grid>\r\n                <Grid item lg={4} md={4} xs={12}>\r\n                <Card className=\"recoveryCard\">\r\n                    <CardContent>\r\n                        <Typography  color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\"><CountUp start={0} end={recovered.value} duration={2} separator=',' /></Typography>\r\n                        <Typography  color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">Number Of Recoveries</Typography>\r\n                    </CardContent>\r\n      \r\n                 </Card>\r\n                </Grid>\r\n                <Grid item lg={4} md={4} xs={12}>\r\n                <Card className=\"deathCard\">\r\n                    <CardContent>\r\n                        <Typography  color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\"><CountUp start={0} end={deaths.value} duration={2} separator=',' /></Typography>\r\n                        <Typography  color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">Number Of Deaths</Typography>\r\n                    </CardContent>\r\n      \r\n                 </Card>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item lg={2} md={1} sm={2} xs={1}>\r\n\r\n            </Grid>\r\n\r\n        </Grid>\r\n        </>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Cards","import React from 'react'\r\n\r\n\r\nexport const fetchData = async () =>{\r\nlet data = await fetch('https://covid19.mathdro.id/api')\r\nlet newData = await data.json()\r\n\r\n\r\n// console.log(newData)\r\nreturn {\r\n    confirmed:newData.confirmed,\r\n    recovered:newData.recovered,\r\n    deaths:newData.deaths,\r\n    lastUpdate:newData.lastUpdate\r\n}\r\n}\r\n\r\nexport const fetchCountries = async () =>{\r\n    let countries = await fetch('https://covid19.mathdro.id/api/countries')\r\n    let countriesJSON = await countries.json();\r\n    \r\n\r\n    return countriesJSON\r\n}\r\n\r\nexport const fetchByCountry = async (countryName) =>{\r\n    // console.log(countryName)\r\n\r\n    if(countryName=='global'){\r\n        let data = await fetch('https://covid19.mathdro.id/api')\r\n        let newData = await data.json()\r\n        return newData\r\n    }\r\n let data = await fetch(`https://covid19.mathdro.id/api/countries/${countryName}`)\r\n let modifiedData = await data.json();\r\n\r\n return modifiedData\r\n}\r\n\r\n\r\nexport const fetchDailyData = async() =>{\r\n\r\n    let data= await fetch('https://covid19.mathdro.id/api/daily')\r\n    let modifiedData = await data.json();\r\n\r\n    return modifiedData\r\n\r\n} \r\n","import React, { useEffect, useState } from 'react'\r\nimport {fetchCountries} from '../../Api'\r\nimport './CountryPicker.css'\r\n\r\nconst CountryPicker = (props) =>{\r\n\r\n    const [countryName, changeCountryName] = useState([])\r\n    const [hValue, changeHvalue] = useState('') \r\n\r\n    const changeHandle = (e) =>{\r\n        props.setcountry(e.target.value)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async () =>{\r\n\r\n            let countriesobj= await fetchCountries();\r\n           changeCountryName(countriesobj.countries)\r\n        }\r\n\r\n        fetchAPI()\r\n    }, [])\r\n\r\n    \r\n    // console.log(hValue)\r\n\r\n\r\n    return(\r\n        <>\r\n        \r\n        <select onChange={changeHandle} className='selectcountry'>\r\n            <option   value=\"global\">Global</option>\r\n            {countryName.map((elem)=> <option value={elem.name}>{elem.name}</option>)}\r\n           \r\n        </select>\r\n        {/* <h1>{hValue}</h1> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","import React, { useState, useEffect } from 'react'\r\nimport {fetchDailyData, fetchByCountry} from '../../Api'\r\nimport './Chart.css'\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nconst Chart = (props) =>{\r\n    // console.log(props)\r\n    const [dailyData, setDailyData] = useState([])\r\n   \r\n    useEffect(()=>{\r\n\r\n        const fetchChartData = async() =>{\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n        fetchChartData();\r\n    },[])\r\n\r\n    let lineChart = (dailyData.length) ? \r\n    <Line \r\n       data={{\r\n           labels:dailyData.map(elem=>elem.reportDate),\r\n           datasets: [{\r\n               label:'Confirmed',\r\n               data: dailyData.map(elem=>elem.confirmed.total),\r\n               borderColor:'blue',\r\n               backgroundColor:'rgba(0,0,255, 0.2)'\r\n           }, {\r\n               label:'Deaths',\r\n               data: dailyData.map(elem=>elem.deaths.total),\r\n               borderColor:'red',\r\n               backgroundColor:'rgba(255,0,0, 0.2)'\r\n           }]\r\n       }} \r\n    /> : null;\r\n\r\n    let barChart = (props.data.confirmed)? <Bar \r\n        data={{\r\n            labels:['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [{\r\n                // label:'confirmed',\r\n                data:[`${props.data.confirmed.value}`,`${props.data.recovered.value}`,`${props.data.deaths.value}`],\r\n                backgroundColor:['rgba(112, 224, 255)', 'rgba(112, 255, 169)', 'red']\r\n            }]\r\n        }}\r\n\r\n        options = {{\r\n            legend:{display:false}\r\n        }}\r\n    /> : null\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n        <div className='container'>\r\n\r\n        {props.data.confirmed ? ((props.data.confirmed.value>20000000) ? lineChart : barChart) : null}\r\n\r\n        \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, { useEffect, useState } from 'react';\nimport Cards from './Components/Card/Cards.js'\nimport CountryPicker from './Components/CountryPicker/CountryPicker.js'\nimport Chart from './Components/Chart/Chart.js'\nimport {fetchData, fetchByCountry} from './Api'\nimport logo from './Logo/logo.png'\nimport './App.css';\nimport { render } from '@testing-library/react';\n\nconst App = () =>{\n  \n const [cardData, changeCardData] = useState({})\n const [selectedCountry, chnageSelectedCountry] = useState('')\n\n\n const setCountry =  (countryName) =>{\n  chnageSelectedCountry(countryName)\n \n\n }\n\n if (selectedCountry!==''){\n  const loadCountryData = async(country) =>{\n   const data = await fetchByCountry(country)\n   changeCardData(data)\n   \n   }\n   loadCountryData(selectedCountry)\n\n }\n\n \n\n\n\nuseEffect(async ()=>{\n  const data = await fetchData()\n  changeCardData(data)\n}, [])\n\n\n\n\n\n  // console.log(this.state)\n  return (\n   \n    <div className=\"App\">\n      <img className='logo' src={logo} />\n      <h1>Selected Country : {(selectedCountry==''? 'Global' : selectedCountry)}</h1>\n      <Cards fetchedData={cardData}/>\n      <CountryPicker setcountry={setCountry}/>\n      <Chart data={cardData}/>\n    </div>\n  );\n\n\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}